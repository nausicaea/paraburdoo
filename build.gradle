plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

def maven_repo = System.env.MAVEN_REPO
def minecraft_version = System.env.MINECRAFT_VERSION ?: '1.21.4'
def yarn_mappings_version = System.env.YARN_MAPPINGS_VERSION ?: '1.21.4+build.8'
def fabric_loader_version = System.env.FABRIC_LOADER_VERSION ?: '0.17.2'
def project_prerelease_info = System.env.PROJECT_PRERELEASE_INFO ?: 'dirty'
def project_version_metadata = System.env.PROJECT_VERSION_METADATA ?: minecraft_version.replace('.', '-')

def semver = { major, minor, patch, prerelease = '', metadata = '' ->
    def version = "${major}.${minor}.${patch}"
    if (prerelease.size() > 0) version += "-${prerelease}"
    if (metadata.size() > 0) version += "+${metadata}"
    return version
}

version = semver(
    project.mod_major_version, 
    project.mod_minor_version, 
    project.mod_patch_version, 
    project_prerelease_info,
    project_version_metadata
)
group = project.maven_group

configurations.configureEach {
    resolutionStrategy.failOnChangingVersions()
}

base {
	archivesName = project.archives_base_name
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = 'Kneelawk Maven'
                url = 'https://maven.kneelawk.com'
            }
        }
        filter {
            includeGroup 'com.kneelawk'
        }
    }
    maven {
        name = 'Nucleoid'
        url = 'https://maven.nucleoid.xyz'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = 'Modrinth'
                url = 'https://api.modrinth.com/maven'
            }
        }
        filter {
            includeGroup 'maven.modrinth'
        }
    }
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"paraburdoo" {
			sourceSet sourceSets.main
            sourceSet sourceSets.client
		}
	}
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "net.fabricmc:yarn:${yarn_mappings_version}:v2"
	modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Polymer libraries
    modImplementation "maven.modrinth:polyfactory:${project.polyfactory_version}"
    modImplementation "eu.pb4:polymer-core:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-blocks:${project.polymer_version}"
    modImplementation "eu.pb4:polymer-resource-pack:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-resource-pack-extras:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-autohost:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-virtual-entity:${project.polymer_version}"
	modImplementation 'eu.pb4:map-canvas-api:0.5.0+1.21.3'
	modImplementation 'eu.pb4:common-protection-api:1.0.0'
	modImplementation 'eu.pb4:sidebar-api:0.5.1+1.21.1'
	modImplementation 'eu.pb4:sgui:1.8.2+1.21.4'
	modImplementation 'eu.pb4:factorytools:0.5.0+1.21.4'
	modImplementation 'com.kneelawk.graphlib:graphlib-core-fabric:2.0.3+1.21'

    modCompileOnly modLocalRuntime("maven.modrinth:polydex:${project.polydex_version}")
    modLocalRuntime "eu.pb4:sgui:1.8.1+1.21.4"
	modLocalRuntime "eu.pb4:placeholder-api:2.5.1+1.21.3"
	modLocalRuntime "eu.pb4:predicate-api:0.6.0+1.21.2"
	modLocalRuntime "eu.pb4:player-data-api:0.7.0+1.21.3"
	modLocalRuntime "eu.pb4:sidebar-api:0.5.0+1.21"
	modLocalRuntime "xyz.nucleoid:server-translations-api:2.4.0+1.21.2-rc1"
	modLocalRuntime "me.lucko:fabric-permissions-api:0.3.3"
}

processResources {
	inputs.property "version", project.version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "fabric_loader_version", fabric_loader_version
    inputs.property "polyfactory_version", project.polyfactory_version
    inputs.property "polymer_version", project.polymer_version
    inputs.property "polydex_version", project.polydex_version

	filesMatching("fabric.mod.json") {
        expand "version": project.version, "minecraft_version": minecraft_version, "fabric_loader_version": fabric_loader_version, "polyfactory_version": project.polyfactory_version, "polymer_version": project.polymer_version, "polydex_version": project.polydex_version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

// configure the maven publication
if (maven_repo != null) {
    publishing {
        publications {
            create("mavenJava", MavenPublication) {
                from components.java
                groupId = project.maven_group
                artifactId = project.archives_base_name
                version = project.version
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            maven {
                name = 'GitHubPackages'
                url = uri(maven_repo)
                credentials {
                    username = System.env.USERNAME
                    password = System.env.TOKEN
                }
            }
        }
    }
}
